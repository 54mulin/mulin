{
  "version": 3,
  "sources": ["../../vuetify/src/components/VExpansionPanel/VExpansionPanels.tsx", "../../vuetify/src/composables/lazy.ts", "../../vuetify/src/components/VExpansionPanel/VExpansionPanelText.tsx", "../../vuetify/src/components/VExpansionPanel/VExpansionPanelTitle.tsx", "../../vuetify/src/components/VExpansionPanel/VExpansionPanel.tsx"],
  "sourcesContent": ["// Styles\nimport './VExpansionPanel.sass'\n\n// Components\nimport { makeVExpansionPanelProps } from './VExpansionPanel'\n\n// Composables\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeGroupProps, useGroup } from '@/composables/group'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType } from 'vue'\nimport type { GroupItemProvide } from '@/composables/group'\n\nexport const VExpansionPanelSymbol: InjectionKey<GroupItemProvide> = Symbol.for('vuetify:v-expansion-panel')\n\nconst allowedVariants = ['default', 'accordion', 'inset', 'popout'] as const\n\ntype Variant = typeof allowedVariants[number]\n\nexport type VExpansionPanelSlot = {\n  prev: () => void\n  next: () => void\n}\n\nexport type VExpansionPanelSlots = {\n  default: VExpansionPanelSlot\n}\n\nexport const makeVExpansionPanelsProps = propsFactory({\n  flat: Boolean,\n\n  ...makeGroupProps(),\n  ...makeVExpansionPanelProps(),\n  ...makeThemeProps(),\n\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'default',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'VExpansionPanels')\n\nexport const VExpansionPanels = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanels',\n\n  props: makeVExpansionPanelsProps(),\n\n  emits: {\n    'update:modelValue': (val: unknown) => true,\n  },\n\n  setup (props, { slots }) {\n    const { next, prev } = useGroup(props, VExpansionPanelSymbol)\n\n    const { themeClasses } = provideTheme(props)\n\n    const variantClass = computed(() => props.variant && `v-expansion-panels--variant-${props.variant}`)\n\n    provideDefaults({\n      VExpansionPanel: {\n        bgColor: toRef(props, 'bgColor'),\n        collapseIcon: toRef(props, 'collapseIcon'),\n        color: toRef(props, 'color'),\n        eager: toRef(props, 'eager'),\n        elevation: toRef(props, 'elevation'),\n        expandIcon: toRef(props, 'expandIcon'),\n        focusable: toRef(props, 'focusable'),\n        hideActions: toRef(props, 'hideActions'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        rounded: toRef(props, 'rounded'),\n        static: toRef(props, 'static'),\n      },\n    })\n\n    useRender(() => (\n      <props.tag\n        class={[\n          'v-expansion-panels',\n          {\n            'v-expansion-panels--flat': props.flat,\n            'v-expansion-panels--tile': props.tile,\n          },\n          themeClasses.value,\n          variantClass.value,\n          props.class,\n        ]}\n        style={ props.style }\n      >\n        { slots.default?.({ prev, next }) }\n      </props.tag>\n    ))\n\n    return {\n      next,\n      prev,\n    }\n  },\n})\n\nexport type VExpansionPanels = InstanceType<typeof VExpansionPanels>\n", "// Utilities\nimport { computed, shallowRef, watch } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nexport const makeLazyProps = propsFactory({\n  eager: Boolean,\n}, 'lazy')\n\nexport function useLazy (props: { eager: boolean }, active: Ref<boolean>) {\n  const isBooted = shallowRef(false)\n  const hasContent = computed(() => isBooted.value || props.eager || active.value)\n\n  watch(active, () => isBooted.value = true)\n\n  function onAfterLeave () {\n    if (!props.eager) isBooted.value = false\n  }\n\n  return { isBooted, hasContent, onAfterLeave }\n}\n", "// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VExpandTransition } from '@/components/transitions'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeLazyProps, useLazy } from '@/composables/lazy'\n\n// Utilities\nimport { inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelTextProps = propsFactory({\n  ...makeComponentProps(),\n  ...makeLazyProps(),\n}, 'VExpansionPanelText')\n\nexport const VExpansionPanelText = genericComponent()({\n  name: 'VExpansionPanelText',\n\n  props: makeVExpansionPanelTextProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-text needs to be placed inside v-expansion-panel')\n\n    const { hasContent, onAfterLeave } = useLazy(props, expansionPanel.isSelected)\n\n    useRender(() => (\n      <VExpandTransition onAfterLeave={ onAfterLeave }>\n        <div\n          class={[\n            'v-expansion-panel-text',\n            props.class,\n          ]}\n          style={ props.style }\n          v-show={ expansionPanel.isSelected.value }\n        >\n          { slots.default && hasContent.value && (\n            <div class=\"v-expansion-panel-text__wrapper\">\n              { slots.default?.() }\n            </div>\n          )}\n        </div>\n      </VExpandTransition>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelText = InstanceType<typeof VExpansionPanelText>\n", "// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { VIcon } from '@/components/VIcon'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue } from '@/composables/icons'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { RippleDirectiveBinding } from '@/directives/ripple'\n\ninterface ExpansionPanelTitleSlot {\n  collapseIcon: IconValue\n  disabled: boolean | undefined\n  expanded: boolean\n  expandIcon: IconValue\n  readonly: boolean\n}\n\nexport type VExpansionPanelTitleSlots = {\n  default: ExpansionPanelTitleSlot\n  actions: ExpansionPanelTitleSlot\n}\n\nexport const makeVExpansionPanelTitleProps = propsFactory({\n  color: String,\n  expandIcon: {\n    type: IconValue,\n    default: '$expand',\n  },\n  collapseIcon: {\n    type: IconValue,\n    default: '$collapse',\n  },\n  hideActions: Boolean,\n  focusable: Boolean,\n  static: Boolean,\n  ripple: {\n    type: [Boolean, Object] as PropType<RippleDirectiveBinding['value']>,\n    default: false,\n  },\n  readonly: Boolean,\n\n  ...makeComponentProps(),\n}, 'VExpansionPanelTitle')\n\nexport const VExpansionPanelTitle = genericComponent<VExpansionPanelTitleSlots>()({\n  name: 'VExpansionPanelTitle',\n\n  directives: { Ripple },\n\n  props: makeVExpansionPanelTitleProps(),\n\n  setup (props, { slots }) {\n    const expansionPanel = inject(VExpansionPanelSymbol)\n\n    if (!expansionPanel) throw new Error('[Vuetify] v-expansion-panel-title needs to be placed inside v-expansion-panel')\n\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'color')\n\n    const slotProps = computed(() => ({\n      collapseIcon: props.collapseIcon,\n      disabled: expansionPanel.disabled.value,\n      expanded: expansionPanel.isSelected.value,\n      expandIcon: props.expandIcon,\n      readonly: props.readonly,\n    }))\n\n    useRender(() => (\n      <button\n        class={[\n          'v-expansion-panel-title',\n          {\n            'v-expansion-panel-title--active': expansionPanel.isSelected.value,\n            'v-expansion-panel-title--focusable': props.focusable,\n            'v-expansion-panel-title--static': props.static,\n          },\n          backgroundColorClasses.value,\n          props.class,\n        ]}\n        style={[\n          backgroundColorStyles.value,\n          props.style,\n        ]}\n        type=\"button\"\n        tabindex={ expansionPanel.disabled.value ? -1 : undefined }\n        disabled={ expansionPanel.disabled.value }\n        aria-expanded={ expansionPanel.isSelected.value }\n        onClick={ !props.readonly ? expansionPanel.toggle : undefined }\n        v-ripple={ props.ripple }\n      >\n        <span class=\"v-expansion-panel-title__overlay\" />\n\n        { slots.default?.(slotProps.value) }\n\n        { !props.hideActions && (\n          <span class=\"v-expansion-panel-title__icon\">\n            {\n              slots.actions ? slots.actions(slotProps.value)\n              : <VIcon icon={ expansionPanel.isSelected.value ? props.collapseIcon : props.expandIcon } />\n            }\n          </span>\n        )}\n      </button>\n    ))\n\n    return {}\n  },\n})\n\nexport type VExpansionPanelTitle = InstanceType<typeof VExpansionPanelTitle>\n", "// Components\nimport { VExpansionPanelSymbol } from './VExpansionPanels'\nimport { makeVExpansionPanelTextProps, VExpansionPanelText } from './VExpansionPanelText'\nimport { makeVExpansionPanelTitleProps, VExpansionPanelTitle } from './VExpansionPanelTitle'\n\n// Composables\nimport { useBackgroundColor } from '@/composables/color'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { makeGroupItemProps, useGroupItem } from '@/composables/group'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\n\n// Utilities\nimport { computed, provide } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVExpansionPanelProps = propsFactory({\n  title: String,\n  text: String,\n  bgColor: String,\n\n  ...makeElevationProps(),\n  ...makeGroupItemProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps(),\n  ...makeVExpansionPanelTitleProps(),\n  ...makeVExpansionPanelTextProps(),\n}, 'VExpansionPanel')\n\nexport type VExpansionPanelSlots = {\n  default: never\n  title: never\n  text: never\n}\n\nexport const VExpansionPanel = genericComponent<VExpansionPanelSlots>()({\n  name: 'VExpansionPanel',\n\n  props: makeVExpansionPanelProps(),\n\n  emits: {\n    'group:selected': (val: { value: boolean }) => true,\n  },\n\n  setup (props, { slots }) {\n    const groupItem = useGroupItem(props, VExpansionPanelSymbol)\n    const { backgroundColorClasses, backgroundColorStyles } = useBackgroundColor(props, 'bgColor')\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n    const isDisabled = computed(() => groupItem?.disabled.value || props.disabled)\n\n    const selectedIndices = computed(() => groupItem.group.items.value.reduce<number[]>((arr, item, index) => {\n      if (groupItem.group.selected.value.includes(item.id)) arr.push(index)\n      return arr\n    }, []))\n\n    const isBeforeSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === 1)\n    })\n\n    const isAfterSelected = computed(() => {\n      const index = groupItem.group.items.value.findIndex(item => item.id === groupItem.id)\n      return !groupItem.isSelected.value &&\n        selectedIndices.value.some(selectedIndex => selectedIndex - index === -1)\n    })\n\n    provide(VExpansionPanelSymbol, groupItem)\n\n    useRender(() => {\n      const hasText = !!(slots.text || props.text)\n      const hasTitle = !!(slots.title || props.title)\n\n      const expansionPanelTitleProps = VExpansionPanelTitle.filterProps(props)\n      const expansionPanelTextProps = VExpansionPanelText.filterProps(props)\n\n      return (\n        <props.tag\n          class={[\n            'v-expansion-panel',\n            {\n              'v-expansion-panel--active': groupItem.isSelected.value,\n              'v-expansion-panel--before-active': isBeforeSelected.value,\n              'v-expansion-panel--after-active': isAfterSelected.value,\n              'v-expansion-panel--disabled': isDisabled.value,\n            },\n            roundedClasses.value,\n            backgroundColorClasses.value,\n            props.class,\n          ]}\n          style={[\n            backgroundColorStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            class={[\n              'v-expansion-panel__shadow',\n              ...elevationClasses.value,\n            ]}\n          />\n\n          { hasTitle && (\n            <VExpansionPanelTitle\n              key=\"title\"\n              { ...expansionPanelTitleProps }\n            >\n              { slots.title ? slots.title() : props.title }\n            </VExpansionPanelTitle>\n          )}\n\n          { hasText && (\n            <VExpansionPanelText\n              key=\"text\"\n              { ...expansionPanelTextProps }\n            >\n              { slots.text ? slots.text() : props.text }\n            </VExpansionPanelText>\n          )}\n\n          { slots.default?.() }\n        </props.tag>\n      )\n    })\n\n    return {\n      groupItem,\n    }\n  },\n})\n\nexport type VExpansionPanel = InstanceType<typeof VExpansionPanel>\n"],
  "mappings": "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",
  "names": ["makeLazyProps", "propsFactory", "eager", "Boolean", "useLazy", "props", "active", "isBooted", "shallowRef", "hasContent", "computed", "value", "watch", "onAfterLeave", "makeVExpansionPanelTextProps", "propsFactory", "makeComponentProps", "makeLazyProps", "VExpansionPanelText", "genericComponent", "name", "props", "setup", "_ref", "slots", "expansionPanel", "inject", "VExpansionPanelSymbol", "Error", "hasContent", "onAfterLeave", "useLazy", "isSelected", "useRender", "_createVNode", "VExpandTransition", "default", "_withDirectives", "class", "style", "value", "_vShow", "makeVExpansionPanelTitleProps", "propsFactory", "color", "String", "expandIcon", "type", "IconValue", "default", "collapseIcon", "hideActions", "Boolean", "focusable", "static", "ripple", "Object", "readonly", "makeComponentProps", "VExpansionPanelTitle", "genericComponent", "name", "directives", "Ripple", "props", "setup", "_ref", "slots", "expansionPanel", "inject", "VExpansionPanelSymbol", "Error", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "slotProps", "computed", "disabled", "value", "expanded", "isSelected", "useRender", "_withDirectives", "_createVNode", "class", "style", "undefined", "toggle", "actions", "VIcon", "_resolveDirective", "makeVExpansionPanelProps", "propsFactory", "title", "String", "text", "bgColor", "makeElevationProps", "makeGroupItemProps", "makeRoundedProps", "makeTagProps", "makeVExpansionPanelTitleProps", "makeVExpansionPanelTextProps", "VExpansionPanel", "genericComponent", "name", "props", "emits", "val", "setup", "_ref", "slots", "groupItem", "useGroupItem", "VExpansionPanelSymbol", "backgroundColorClasses", "backgroundColorStyles", "useBackgroundColor", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "isDisabled", "computed", "disabled", "value", "selectedIndices", "group", "items", "reduce", "arr", "item", "index", "selected", "includes", "id", "push", "isBeforeSelected", "findIndex", "isSelected", "some", "selectedIndex", "isAfterSelected", "provide", "useRender", "hasText", "hasTitle", "expansionPanelTitleProps", "VExpansionPanelTitle", "filterProps", "expansionPanelTextProps", "VExpansionPanelText", "_createVNode", "tag", "class", "style", "default", "_mergeProps", "VExpansionPanelSymbol", "Symbol", "for", "allowedVariants", "makeVExpansionPanelsProps", "propsFactory", "flat", "Boolean", "makeGroupProps", "makeVExpansionPanelProps", "makeThemeProps", "variant", "type", "String", "default", "validator", "v", "includes", "VExpansionPanels", "genericComponent", "name", "props", "emits", "val", "setup", "_ref", "slots", "next", "prev", "useGroup", "themeClasses", "provideTheme", "variantClass", "computed", "provideDefaults", "VExpansionPanel", "bgColor", "toRef", "collapseIcon", "color", "eager", "elevation", "expandIcon", "focusable", "hideActions", "readonly", "ripple", "rounded", "static", "useRender", "_createVNode", "tag", "tile", "value", "class", "style"]
}
